import Service from '@ember/service';
import { Meta } from '../types';
import { extractMeta } from '../utils/utils';

const screenWidth = typeof screen !== 'undefined' ? screen.width : 320;
// const extentionTypeMapping = new Map<string, ImageType>([['jpg', 'jpeg']]);
/**
 * Service class to provides images generated by the responsive images package
 */
export default class ResponsiveImageService extends Service {
  /**
   * the screen's width
   * This is the base value to calculate the image size.
   * That means the {{#crossLink "Services/ResponsiveImage:getImageBySize"}}getImageBySize{{/crossLink}} will return
   * an image that's close to `screenWidth *  window.devicePixelRatio * size / 100`
   */
  screenWidth = screenWidth;

  /**
   * the physical width
   */
  physicalWidth = this.screenWidth * ((window && window.devicePixelRatio) || 1);

  /**
   *
   * @param size
   * @private
   */
  public getDestinationWidthBySize(size: number): number {
    const physicalWidth = this.physicalWidth;
    const factor = (size || 100) / 100;

    return physicalWidth * factor;
  }

  private _meta?: Meta;

  public getProviderConfig<CONFIG = unknown>(
    provider: string
  ): Partial<CONFIG> {
    return (this.meta.providers?.[provider] as Partial<CONFIG>) ?? {};
  }

  /**
   * the meta values from build time
   */
  get meta(): Meta {
    if (!this._meta) {
      // eslint-disable-next-line ember/no-side-effects
      this._meta = extractMeta(this);
    }

    return this._meta;
  }
  set meta(meta: Meta) {
    this._meta = meta;
  }

  // public getType(imageName: string): ImageType {
  //   const extension = imageName.split('.').pop();
  //   assert(`No extension found for ${imageName}`, extension);
  //   return extentionTypeMapping.get(extension) ?? (extension as ImageType);
  // }
}
